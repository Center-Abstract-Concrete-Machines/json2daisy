{
	"Switch": {
		"map_init": "{name}.Init(daisy::patch_sm::DaisyPatchSM::{pin}, som.AudioCallbackRate(), {type}, {polarity}, {pull});",
		"typename": "daisy::Switch",
		"direction": "in",
		"pin": "a",
		"type": "daisy::Switch::TYPE_MOMENTARY",
		"polarity": "daisy::Switch::POLARITY_INVERTED",
		"pull": "daisy::Switch::PULL_UP",
		"process": "{name}.Debounce();",
		"updaterate": "{name}.SetUpdateRate(som.AudioCallbackRate());",
		"mapping": [
			{
				"name": "{name}_press",
				"get": "({class_name}.{name}.Pressed()?1.f:0.f)",
				"range": [
					0,
					1
				],
				"bool": false
			},
			{
				"name": "{name}",
				"get": "({class_name}.{name}.RisingEdge()?1.f:0.f)",
				"range": [
					0,
					1
				],
				"bool": true
			},
			{
				"name": "{name}_fall",
				"get": "({class_name}.{name}.FallingEdge()?1.f:0.f)",
				"range": [
					0,
					1
				],
				"bool": true
			},
			{
				"name": "{name}_seconds",
				"get": "({class_name}.{name}.TimeHeldMs()*0.001f)",
				"range": null,
				"bool": false
			}
		]
	},
	"Switch3": {
		"map_init": "{name}.Init(daisy::patch_sm::DaisyPatchSM::{pin_a}, daisy::patch_sm::DaisyPatchSM::{pin_b}));",
		"typename": "daisy::Switch3",
		"direction": "in",
		"pin": "a,b",
		"mapping": [
			{
				"name": "{name}",
				"get": "({class_name}.{name}.Read()*0.5f+0.5f)",
				"range": [
					0,
					2
				],
				"bool": false
			}
		]
	},
	"Encoder": {
		"map_init": "{name}.Init(daisy::patch_sm::DaisyPatchSM::{pin_a}, daisy::patch_sm::DaisyPatchSM::{pin_b}, daisy::patch_sm::DaisyPatchSM::{pin_click}, som.AudioCallbackRate());",
		"typename": "daisy::Encoder",
		"direction": "in",
		"pin": "a,b,click",
		"process": "{name}.Debounce();",
		"updaterate": "{name}.SetUpdateRate(som.AudioCallbackRate());",
		"mapping": [
			{
				"name": "{name}",
				"get": "({class_name}.{name}.Increment())",
				"range": [
					-1,
					1
				],
				"bool": false
			},
			{
				"name": "{name}_press",
				"get": "({class_name}.{name}.Pressed()?1.f:0.f)",
				"range": [
					0,
					1
				],
				"bool": false
			},
			{
				"name": "{name}_rise",
				"get": "({class_name}.{name}.RisingEdge()?1.f:0.f)",
				"range": [
					0,
					1
				],
				"bool": true
			},
			{
				"name": "{name}_fall",
				"get": "({class_name}.{name}.FallingEdge()?1.f:0.f)",
				"range": [
					0,
					1
				],
				"bool": true
			},
			{
				"name": "{name}_seconds",
				"get": "({class_name}.{name}.TimeHeldMs()*0.001f)",
				"range": null,
				"bool": false
			}
		]
	},
	"GateIn": {
		"map_init": "{name}.Init(&daisy::patch_sm::DaisyPatchSM::{pin});",
		"typename": "daisy::GateIn",
		"direction": "in",
		"pin": "a",
		"default_prefix": "som.",
		"mapping": [
			{
				"name": "{name}",
				"get": "({class_name}.{default_prefix}{name}.State()?1.f:0.f)",
				"range": [
					0,
					1
				],
				"bool": false
			},
			{
				"name": "{name}_trig",
				"get": "({class_name}.{default_prefix}{name}.Trig()?1.f:0.f)",
				"range": [
					0,
					1
				],
				"bool": true
			}
		]
	},
	"AnalogControl": {
		"init_single": "cfg[{i}].InitSingle(daisy::patch_sm::DaisyPatchSM::{pin});",
		"map_init": "{name}.Init(som.adc.GetPtr({i}), som.AudioCallbackRate(), {flip}, {invert});",
		"typename": "daisy::AnalogControl",
		"direction": "in",
		"pin": "a",
		"flip": "false",
		"invert": "false",
		"slew": "1.0/som.AudioCallbackRate()",
		"process": "{name}.Process();",
		"updaterate": "{name}.SetSampleRate(som.AudioCallbackRate());",
		"mapping": [
			{
				"name": "{name}",
				"get": "({class_name}.som.GetAdcValue((int)daisy::patch_sm::{name_upper}))",
				"range": [
					0,
					1
				],
				"bool": false
			}
		]
	},
	"Led": {
		"map_init": "{name}.Init(daisy::patch_sm::DaisyPatchSM::{pin}), {invert});\n\t\t{name}.Set(0.0f);",
		"typename": "daisy::Led",
		"direction": "out",
		"pin": "a",
		"invert": "true",
		"postprocess": "{name}.Update();",
		"mapping": [
			{
				"name": "{name}",
				"set": "{class_name}.{name}.Set({value});"
			}
		]
	},
	"RgbLed": {
		"map_init": "{name}.Init(daisy::patch_sm::DaisyPatchSM::{pin_r}, daisy::patch_sm::DaisyPatchSM::{pin_g}, daisy::patch_sm::DaisyPatchSM::{pin_b}, {invert});\n\t\t{name}.Set(0.0f, 0.0f, 0.0f);",
		"typename": "daisy::RgbLed",
		"direction": "out",
		"pin": "r,g,b",
		"invert": "true",
		"postprocess": "{name}.Update();",
		"mapping": [
			{
				"name": "{name}_red",
				"set": "{class_name}.{name}.SetRed({value});"
			},
			{
				"name": "{name}_green",
				"set": "{class_name}.{name}.SetGreen({value});"
			},
			{
				"name": "{name}_blue",
				"set": "{class_name}.{name}.SetBlue({value});"
			},
			{
				"name": "{name}",
				"set": "{class_name}.{name}.Set(clamp(-{value}, 0.f, 1.f), 0.f, clamp({value}, 0.f, 1.f));"
			},
			{
				"name": "{name}_white",
				"set": "{class_name}.{name}.Set({value},{value},{value});"
			}
		]
	},
	"GateOut": {
		"map_init": "{name}.pin  = daisy::patch_sm::DaisyPatchSM::{pin};\n\t\t{name}.mode = {mode};\n\t\t{name}.pull = {pull};\n\t\tdsy_gpio_init(&{name});",
		"typename": "dsy_gpio",
		"direction": "out",
		"pin": "a",
		"default_prefix": "som.",
		"mode": "DSY_GPIO_MODE_OUTPUT_PP",
		"pull": "DSY_GPIO_NOPULL",
		"mapping": [
			{
				"name": "{name}",
				"set": "dsy_gpio_write(&{class_name}.{default_prefix}{name}, {value});"
			}
		]
	},
	"CVOuts": {
		"map_init": "{name}.bitdepth = {bitdepth};\n\t\t{name}.buff_state = {buff_state};\n\t\t{name}.mode = {mode};\n\t\t{name}.chn = {channel};\n\t\tsom.dac.Init({name});\n\t\tsom.dac.WriteValue({channel}, 0);",
		"typename": "daisy::DacHandle::Config",
		"direction": "out",
		"pin": "",
		"bitdepth": "daisy::DacHandle::BitDepth::BITS_12",
		"buff_state": "daisy::DacHandle::BufferState::ENABLED",
		"mode": "daisy::DacHandle::Mode::POLLING",
		"channel": "daisy::DacHandle::Channel::BOTH",
		"mapping": [
			{
				"name": "{name}1",
				"set": "{class_name}.som.WriteCvOut(daisy::patch_sm::CV_OUT_1, {value} * 5.f);",
				"where": "main"
			},
			{
				"name": "{name}2",
				"set": "{class_name}.som.WriteCvOut(daisy::patch_sm::CV_OUT_2, {value} * 5.f);",
				"where": "main"
			}
		]
	},
	"MotorShield": {
		"map_init": "daisy::Pca9685::Config {name}_pca_config;\n  {name}_pca_config.address = {address};\n  {name}_pca_config.periph = {periph};\n  {name}_pca_config.speed = {speed};\n  {name}_pca_config.scl = som.GetPin({pin_scl});\n  {name}_pca_config.sda = som.GetPin({pin_sda});\n  daisy::Adafruit_MotorShield::Config {name}_config;\n  {name}_config.pca9685_config = {name}_pca_config;\n  {name}_config.frequency = {frequency};\n  {name}.Init({name}_config);",
		"typename": "daisy::Adafruit_MotorShield",
		"direction": "out",
		"pin": "scl,sda",
		"address": "daisy::Pca9685::PCA9685_I2C_BASE_ADDRESS",
		"periph": "daisy::I2CHandle::Config::Peripheral::I2C_1",
		"speed": "daisy::I2CHandle::Config::Speed::I2C_400KHZ",
		"frequency": "1600",
		"mapping": [
		]
	},
	"StepperMotor": {
		"map_init": "{name} = {parent}.GetStepper({steps}, {index});\n  {name}->SetSpeed({speed});",
		"typename": "daisy::Adafruit_MotorShield::Adafruit_StepperMotor*",
		"direction": "out",
		"parent": "",
		"steps": 48,
		"index": 1,
		"speed": 60,
		"loopprocess": "{name}->Process();",
		"mapping": [
			{
				"name": "{name}",
				"set": "{class_name}.{name}->StepNonblocking({value}, daisy::Adafruit_MotorShield::FORWARD);",
				"bool": true
			},
			{
				"name": "{name}_forward",
				"set": "{class_name}.{name}->StepNonblocking({value}, daisy::Adafruit_MotorShield::FORWARD);",
				"bool": true
			},
			{
				"name": "{name}_backward",
				"set": "{class_name}.{name}->StepNonblocking({value}, daisy::Adafruit_MotorShield::BACKWARD);",
				"bool": true
			},
			{
				"name": "{name}_release",
				"set": "{class_name}.{name}->Release();",
				"bool": true
			}
		]
	},
	"DcMotor": {
		"map_init": "{name} = {parent}.GetMotor({index});\n  {name}->SetSpeedFine({speed} * 4095);",
		"typename": "daisy::Adafruit_MotorShield::Adafruit_DCMotor*",
		"direction": "out",
		"parent": "",
		"index": 1,
		"speed": 0.25,
		"mapping": [
			{
				"name": "{name}",
				"set": "{class_name}.{name}->Run(daisy::Adafruit_MotorShield::FORWARD);",
				"bool": true
			},
			{
				"name": "{name}_forward",
				"set": "{class_name}.{name}->Run(daisy::Adafruit_MotorShield::FORWARD);",
				"bool": true
			},
			{
				"name": "{name}_backward",
				"set": "{class_name}.{name}->Run(daisy::Adafruit_MotorShield::BACKWARD);",
				"bool": true
			},
			{
				"name": "{name}_stop",
				"set": "{class_name}.{name}->FullOff();",
				"bool": true
			}
		]
	}
}

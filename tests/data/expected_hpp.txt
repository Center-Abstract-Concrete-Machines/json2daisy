
#ifndef _HEAVY_DAISY_PATCH_TEST_
#define _HEAVY_DAISY_PATCH_TEST_

// #include <string>

#include "Heavy_patch_test.hpp"

#define ANALOG_COUNT 4

#include "daisy_seed.h"
#include "dev/codec_ak4556.h"

using namespace daisy;



#include "dev/oled_ssd130x.h"
// name: patch
struct Daisy {
	void Init(bool boost = false) {

		driver.Configure();
 		driver.Init(boost);
        
		

		

		
        
		
        
		

		
        
		dsy_gpio_pin gatein1_pin = driver.GetPin(20);
		gatein1.Init(&gatein1_pin);
		dsy_gpio_pin gatein2_pin = driver.GetPin(19);
		gatein2.Init(&gatein2_pin);
		
		encoder.Init(driver.GetPin(12), driver.GetPin(11), driver.GetPin(0), driver.AudioCallbackRate());
		
		cfg[0].InitSingle(driver.GetPin(15));
		cfg[1].InitSingle(driver.GetPin(16));
		cfg[2].InitSingle(driver.GetPin(21));
		cfg[3].InitSingle(driver.GetPin(18));
		
		driver.adc.Init(cfg, ANALOG_COUNT);

		knob1.Init(driver.adc.GetPtr(0), driver.AudioCallbackRate(), false, false);
		knob2.Init(driver.adc.GetPtr(1), driver.AudioCallbackRate(), false, false);
		knob3.Init(driver.adc.GetPtr(2), driver.AudioCallbackRate(), false, false);
		knob4.Init(driver.adc.GetPtr(3), driver.AudioCallbackRate(), false, false);

		
		
		
		
		
		
		
		
		
		
		daisy::OledDisplay<daisy::SSD130x4WireSpi128x64Driver>::Config display_config;
		display_config.driver_config.transport_config.Defaults();
		display.Init(display_config);




		SaiHandle::Config sai_config[2];

		// Internal Codec
    sai_config[0].periph          = SaiHandle::Config::Peripheral::SAI_1;
    sai_config[0].sr              = SaiHandle::Config::SampleRate::SAI_48KHZ;
    sai_config[0].bit_depth       = SaiHandle::Config::BitDepth::SAI_24BIT;
    sai_config[0].a_sync          = SaiHandle::Config::Sync::MASTER;
    sai_config[0].b_sync          = SaiHandle::Config::Sync::SLAVE;
    sai_config[0].a_dir           = SaiHandle::Config::Direction::TRANSMIT;
    sai_config[0].b_dir           = SaiHandle::Config::Direction::RECEIVE;
    sai_config[0].pin_config.fs   = {DSY_GPIOE, 4};
    sai_config[0].pin_config.mclk = {DSY_GPIOE, 2};
    sai_config[0].pin_config.sck  = {DSY_GPIOE, 5};
    sai_config[0].pin_config.sa   = {DSY_GPIOE, 6};
    sai_config[0].pin_config.sb   = {DSY_GPIOE, 3};

		sai_config[1].periph          = SaiHandle::Config::Peripheral::SAI_2;
    sai_config[1].sr              = SaiHandle::Config::SampleRate::SAI_48KHZ;
    sai_config[1].bit_depth       = SaiHandle::Config::BitDepth::SAI_24BIT;
    sai_config[1].a_sync          = SaiHandle::Config::Sync::SLAVE;
    sai_config[1].b_sync          = SaiHandle::Config::Sync::MASTER;
    sai_config[1].a_dir           = SaiHandle::Config::Direction::TRANSMIT;
    sai_config[1].b_dir           = SaiHandle::Config::Direction::RECEIVE;
    sai_config[1].pin_config.fs   = driver.GetPin(27);
    sai_config[1].pin_config.mclk = driver.GetPin(24);
    sai_config[1].pin_config.sck  = driver.GetPin(28);
    sai_config[1].pin_config.sa   = driver.GetPin(26);
    sai_config[1].pin_config.sb   = driver.GetPin(25);

		SaiHandle sai_handle[2];
		sai_handle[0].Init(sai_config[0]);
		sai_handle[1].Init(sai_config[1]);

		dsy_gpio_pin codec_reset_pin = driver.GetPin(29);
    Ak4556::Init(codec_reset_pin);

		AudioHandle::Config cfg;
    cfg.blocksize  = 48;
    cfg.samplerate = SaiHandle::Config::SampleRate::SAI_48KHZ;
    cfg.postgain   = 0.5f;
    driver.audio_handle.Init(
			cfg, 
			sai_handle[0]
			,sai_handle[1]
		);


		driver.adc.Start();

	}

	void ProcessAllControls() {
		knob1.Process();
		knob2.Process();
		knob3.Process();
		knob4.Process();
		encoder.Debounce();
	}

	void PostProcess() {
		
	}

	void Display() {
		
	}

	void LoopWriteOut() {
		
	}

	void CallbackWriteOut() {
		
	}

	void CallbackWriteIn(Heavy_patch_test& hv) {
		hv.sendFloatToReceiver(0xCFD93C2D, (knob1.Value())); 
		hv.sendFloatToReceiver(0xA6D27094, (knob2.Value())); 
		hv.sendFloatToReceiver(0xB00C3479, (knob3.Value())); 
		hv.sendFloatToReceiver(0x4BA4C205, (knob4.Value())); 
 
		if ((encoder.RisingEdge()?1.f:0.f))
			hv.sendBangToReceiver(0x7AAC371F); 
		hv.sendFloatToReceiver(0x39ADE514, (encoder.Increment())); 
		hv.sendFloatToReceiver(0x378CB51F, (gatein1.State()?1.f:0.f)); 
		hv.sendFloatToReceiver(0x8924DDEB, (gatein2.State()?1.f:0.f)); 
	}

	void SetAudioSampleRate(daisy::SaiHandle::Config::SampleRate samplerate) {
		driver.SetAudioSampleRate(samplerate);
		SetHidUpdateRates();
	}
	void SetAudioBlockSize(size_t size) {
		driver.SetAudioBlockSize(size);
		SetHidUpdateRates();
	}

	void SetHidUpdateRates() {
		knob1.SetSampleRate(driver.AudioCallbackRate());
		knob2.SetSampleRate(driver.AudioCallbackRate());
		knob3.SetSampleRate(driver.AudioCallbackRate());
		knob4.SetSampleRate(driver.AudioCallbackRate());
		encoder.SetUpdateRate(driver.AudioCallbackRate());
	}

	daisy::DaisySeed driver;
	daisy::AdcChannelConfig cfg[ANALOG_COUNT];
	
	daisy::AnalogControl knob1;
	daisy::AnalogControl knob2;
	daisy::AnalogControl knob3;
	daisy::AnalogControl knob4;
	daisy::Encoder encoder;
	daisy::GateIn gatein1;
	daisy::GateIn gatein2;
	
	daisy::OledDisplay<daisy::SSD130x4WireSpi128x64Driver> display;
	
	int menu_click = 0, menu_hold = 0, menu_rotate = 0;

};

extern Daisy hardware;


#endif // _HEAVY_DAISY_PATCH_TEST_